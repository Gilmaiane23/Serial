//Animações
double animacao_gil[5][25] = {
    // Frame 1: Coração pequeno
    {0.0, 1.0, 0.0, 1.0, 0.0,
     1.0, 1.0, 1.0, 1.0, 1.0,
     1.0, 1.0, 1.0, 1.0, 1.0,
     0.0, 1.0, 1.0, 1.0, 0.0,
     0.0, 0.0, 1.0, 0.0, 0.0},

    // Frame 2: Coração médio
    {0.5, 1.0, 0.5, 1.0, 0.5,
     1.0, 1.0, 1.0, 1.0, 1.0,
     1.0, 1.0, 1.0, 1.0, 1.0,
     0.5, 1.0, 1.0, 1.0, 0.5,
     0.0, 0.5, 1.0, 0.5, 0.0},

    // Frame 3: Coração grande (pulsando no máximo)
    {1.0, 1.0, 1.0, 1.0, 1.0,
     1.0, 1.0, 1.0, 1.0, 1.0,
     1.0, 1.0, 1.0, 1.0, 1.0,
     1.0, 1.0, 1.0, 1.0, 1.0,
     0.5, 1.0, 1.0, 1.0, 0.5},

    // Frame 4: Coração médio
    {0.5, 1.0, 0.5, 1.0, 0.5,
     1.0, 1.0, 1.0, 1.0, 1.0,
     1.0, 1.0, 1.0, 1.0, 1.0,
     0.5, 1.0, 1.0, 1.0, 0.5,
     0.0, 0.5, 1.0, 0.5, 0.0},

    // Frame 5: Coração pequeno
    {0.0, 1.0, 0.0, 1.0, 0.0,
     1.0, 1.0, 1.0, 1.0, 1.0,
     1.0, 1.0, 1.0, 1.0, 1.0,
     0.0, 1.0, 1.0, 1.0, 0.0,
     0.0, 0.0, 1.0, 0.0, 0.0},
};

void desenho_frame(const double frame[25], int offset, PIO pio, uint sm, double r, double g, double b) {
    uint32_t buffer[25];
    for (int i = 0; i < 25; i++) {
        uint8_t red = (uint8_t)(frame[i] * r * 255);
        uint8_t green = (uint8_t)(frame[i] * g * 255);
        uint8_t blue = (uint8_t)(frame[i] * b * 255);
        buffer[i] = (red << 16) | (green << 8) | blue;
    }
    for (int i = 0; i < 25; i++) {
        pio_sm_put_blocking(pio, sm, buffer[i]);
    }
}


//Função animação gil
void exibir_animacao(double animacao[][25], int num_frames, int fps, PIO pio, uint sm, double r, double g, double b) {
    int delay = 1000 / fps; // Calcula o delay entre frames em milissegundos
    for (int frame = 0; frame < num_frames; frame++) {
        desenho_gil(animacao[frame], 0, pio, sm, r, g, b); // Mostra o frame atual
        sleep_ms(delay); // Espera o tempo correspondente ao FPS
    }
}


case 'x':
desenho_frame(animacao_gil[frame], 0, pio, sm, r, g, b); // Animação com FPS = 10, cor vermelha
